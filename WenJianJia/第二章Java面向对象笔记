31.类（class）
      1.用变量表示商品的多个属性。
          2.商品的属性各不相同不能用 数组，可以用 类。
          // TODO 注释高亮
          pubilc class  Merchandise        {
           表示是公共类
             // TODO *类体中可以定义描述这个类的属性的变量。我们称之为成员变量（meber variable）
                // TODO*每个成员变量的定义以;结束
        String name;
          String id;
            int count;
              double price;
}
             // TODO  上面这整个类，其实就是创建了一个模板。描述了一种我们需要的数据类型


32.初探类和对象(Instance/Object)
       1. 从数据类型的角度来看，类就是自己创建了一种新的数据类型。类也叫做“自定义类型”。一个java程序中不允许类同名。
        2.   看例程，学习类和对象的使用。
             Merchandise m1 = new Merchandise();
         # 对象变量类型   名字   new 实例
          *使用new操作符，可以创建一个类的实例/对象（instance/object）。
                  *使用new创建一个类的实例后，类中定义的每种变量都会被赋以其类型的初始值。
                    * 这个和数组也是一样的
               *使用一个同类型的对象变量，可以指向并操作这个实例。这两点和数组都很类似。
             3.使用点操作符，给m1指向的实例赋值。
                        对象变量  .   属性的名字 = 赋值;
               4.   通过点操作符操作对象的属性
                           认识点操作符
                               * 点操作符是用来访问/操作前面实体的属性的，类似于“的”
                                 *merchandise.name可以读作merchandise的name  


33.认识引用类型（上）
        *java  中的数据类型分为基本数据类型和引用数据类型
          *看例程，理解引用    
                Merchandise m1;
               * m1是一个Merchandise类型的引用，只能指向Merchandise类型的实例
                          * 引用数据类型变量包括两部分信息：类型和实例。也就是说,
                          *每一个引用数据类型的变量（简称引用），都是指向某个类（class/自定义类型）
                             *的一个实例/对象（instance/object）。不同类型的引用在Java的世界里都是引用。
                                  *引用的类型信息在创建时就已经确定，可以通过给引用赋值，让其指向不同的实例。比如 m1 就是Merchandise类型，只能指向Merchandise的实例。
                  *给一个引用赋值，则两者的类型必须一样，m5可以给m1赋值,因为他们类型是一样的。
          2.引用数据类型和基本数据类型
                     2.1引用数据类型和基本数据类型的相同点
                            *都可以用来创建变量，可以赋值和使用其值
                              *本身都是一个地址
                      2.2引用数据类型和基本数据类型的不同点、
                          *基本类型变量的值，就是地址对应的值。引用数据类型的值还是一个地址，需要通过“二级跳”找到实例
                  * 引用数据类型是Java的一种内部类型，是对所有自定义类型和数组引用的统称，并非特指某种类型。


34.认识引用类型（下）
   Merchandise m1 = new Merchandise();
 *使用new操作符可以创建某个类的一个实例，在Java程序运行的时候，所有这些创建出来的实例都被Java放在内存里一个叫做堆（heap）的，类似公告板的地方
 *创建一个实例，就是根据类的定义，点出需要的“纸”，订成一个本子，挂在布告板上。实例本身，可以认为是一个小本子
*引用里存放的，相当于某个本子所在的布告板的地址。


35.类，对象和引用的关系
   1. 类和对象的关系
     *类是对象的模板，对象是类的一个实例
      *一个Java程序中类名相同的类只能有一个，也就是类型不会重名
       *一个类可以有很多对象
          *一个对象只能根据一个类来创建
     2.引用和类以及对象的关系
      *引用必须是，只能是一个类的引用
           *引用只能指向其所属的类型的类的对象
            *相同类型的引用之间可以赋值
              *只能通过指向一个对象的引用，来操作一个对象，比如访问某个成员变量


36.认识数组类型
1.数组是一种特殊的类
 *数组的类名就是类型带上中括号
 *同一类型的数组，每个数组对象的大小可以不一样。也就是每个数组对象占用的内存可以不一样，这点和类的对象不同。
  *可以用引用指向类型相同大小不同的数组，因为它们属于同一种类型
2.引用的数组
    *可以把类名当作自定义类型，定义引用的数组，甚至多维数组。
3.
  * “数组变量”其背后真身就是引用。数组类型就是一种特殊的类
   *数组的大小不决定数组的类型，数组的类型是只是由元素类型决定的


37.引用的缺省值null
*null是引用类型的缺省值
 *null代表空，不存在。可以读作空
*引用类型的数组创建出来，初始值都是空
   1.null带来的问题
     *大名鼎鼎的NullPointerException(NPE)
    *如果不确定，使用前要先判断引用是不是空
    2.通过null理解引用的”二级跳“
      

38.像自定义类型一样使用类
      1.类就是一种自定义类型
            *在类定义中可以使用类，创建类的引用
             *在类定义中，甚至可以使用类自己的类创建引用
               *引用类型的缺省值是null。一个类定义中如果有引用，创建出来的实例，其缺省值是null


39.java中的包和访问修饰符（上）
    *类多太混乱?用package管理
      1.为了避免类在一起混用，可以把类放在文件夹里。这时就需要用package语句告诉Java这个类在哪个package里。package语句要和源文件的目录完全对应，大小写要一致。
      （class 名字对应文件名， class所在的文件路径就叫package ）
        2.package读作包。一般来说，类都会在包里，而不会直接放在根目录
        3.不同的包里可以有相同名字的类
        4.一个类只能有一个package语句，如果有package语句，则必须是类的第一行有效代码
    *类使用太繁琐怎么办？用import
        1.当使用另一个包里的类时候，需要带上包名
              2.每次使用都带包名很繁琐，可以在使用的类的上面使用import语句，一次性解决问题，就可以直接使用类了。就好像我们之前用过的Scanner类
              3.import语句可以有多个
               4.如果需要import一个包中的很多类，可以使用*通配符
                 ////import 引进
                          1.import  + 路径 + 导入需要使用的类
                           2.import  +  路径 +  *   （通配符）//访问路径下所有的类


40.java中的包和访问修饰符（下）
        1.属性 访问修饰符：public
          *被public修饰的属性，可以被任意包中的类访问
           *没有访问修饰符的属性，称作缺省的访问修饰符，可以被本包内的其他类和自己的对象
            * 访问修饰符是一种限制或者允许属性访问的修饰符
          2.类的全限定名
               *包名 + 类名 = 类的全限定名。也可以简称为 类的全名
                 *同一个Java程序中全限定名字不可重复
                 
41.打造一个小超市
java就是使用类来描述世界，用类的实例（对象）让世界运转起来

42.Intellij
        1. 设置断点，debug调试模式运行程序
         断点（breakpoint）:可以让程序在调试模式停在某一行。
     2.用断点调试程序
             * Frame视图和Variable试图。视图的作用，隐藏和显示
               程序调试标准动作
                    *查看变量的值，展开实例看内部成员变量的值
                     *程序继续执行之Step Over：这一行
                      *程序继续执行之Step Out ：继续执行直到遇到下一个断点或者程序结束
                        *执行任意代码之Evaluate Expression：在对话框输入代码，直接执行看结果值。
                            *条件断点：给断点设置条件，只有满足条时，程序才会在该断点停住。
                *多多使用快捷键进行调试。
 
43.方法：让Merchandise对象有行为
               详解describe方法
               * 方法的调用
              1.通过引用的点操作符，可以调用对象的方法
                         2.方法调用要有括号，即使没有参数
                 *方法可以使用的数据：对象的成员变量（member variable）
                         *方法体内部定义的变量叫做局部变量

44.返回值：让Merchandise计算毛利润
       * 在方法定义中指定方法的返回值类型
        *Java中一个方法只能有一种返回值，如果不需要返回值则用void表示
         *如果定义了返回值，则必须使用return语句返回方法的返回值，return是Java的关键字
            *可以认为，返回值必须要能够用来给返回值类型的变量赋值
          *这个return是代码块里的return，是return所在代码块的最后一个语句
          *一个方法可以有多个返回语句
     *返回值如果是基本类型，则要类型完全相同，或者符合类型自动转换规则
    *如果不符合规则，可以使用强制类型转换 

45.参数：让Merchandise计算多件商品的总价      
         *参数是定义在方法名字后面的括号里的
              *参数定义的规范和变量一样，都是类型名字加标识符，这里的标示符我们叫做参数名。
            *方法体中的代码可以使用参数
                  *参数的值在调用方法的时候需要给出，有的资料叫做实参（实际参数）对应的方法定义这里的参数，叫做形参（形式参数）

46.参数和返回值是怎么传递的？


47.分清参数，局部变量和实例的地盘
         *局部变量就是我们之前说的变量，是在方法体里创建的变量
             *参数和局部变量都是演草纸，方法执行完就清除了
            *对象是实体/实例，不是变量。对象创建出来后，被堆在一起，放在类似公告板的地方。方法里创建的对象是不会随着方法结束被清除的。所以对象的地盘不受限制，只要有引用指向一个对象，这个对象的数据就可以通过这个引用来访问
          *看例程：理解局部变量，参数和实例
*方法的代码可以影响方法之外的数据，我们可以通过指向同一个对象的引用，操作这个对象的属性。
*给返回值赋值，并不会影响用来充当返回值的变量。
*可以通过返回值，操作同一个对象。


48.隐藏的this自引用
方法的参数和方法的局部变量是不能重名的。成员变量可以用this自引用和参数，局部变量重名的时候区分开，
*方法里隐藏着一个this自引用，指向调用这个方法的对象。
*使用一个对象调用方法，也叫做在这个对象上调用方法。因为方法可以访问这个对象的值。
*访问一个成员变量的完整形态，是"this.成员变量的名字"


49.理解方法：一种特殊的代码块
方法是什么？
*类中如果不定义方法，只定义成员变量，那么一个类就没有了功能，只是简单的数据的封装。
创建一个对象之后，所有对这些数据的操作，都要在每个用到这些数据的地方写代码
*类通过成员变量和方法描述世界，成员变量是描述一类事物的属性，是数据；方法是描述一类事物的行为和功能，是对数据的操作。比如最开始我们写的describe方法。
*方法中的代码可以通过操作一个对象的成员变量，完成一个功能。
*方法是Java中代码执行的单元，是代码的载体。所有的代码，都必须属于某一个方法。
*方法就是一串语句，加上数据输入this自引用和参数，执行后得到一个返回值。所以使用一个对象调用一个方法，可以叫做调用对象的方法，也可以叫做"在这个对象上调用方法（invoke a method on an object）"
*方法不是对象的一部分，它是类的一部分。每个对象可以给成员变量赋不同的值，但是无法让方法有不同的行为。同理，无论在一个类中定义多少方法，都不会让影响创建一个对象所占用的内存。
方法的特殊之处
#和代码块比，方法特殊在：
 *有名字
*有返回值
*有参数
*有this自引用
*明确的属于某一个类
*可以（也只能）通过对象引用来调用

50，理解方法的调用:代码的一种特殊跳转*
*看例程：模拟this自引用传递
*看例程：对象可以在自己的方法里调用自己类的别的方法，甚至可以调用自己的方法。
*方法在类中定义的先后，没有任何影响。
*方法是一种根据名字做跳转的代码流程控制方法。它的特殊之处在于有this自引用，有参数，有返回值。

51.给类和方法加Java注释	
*多行注释
*给类添加注释（Javadoc）
*给方法添加注释（Javadoc）
*Oracle官方的Javadoc地址
https://docs.oracle.com/en/java/javse/11/docs/api/index.html
单行注释：//
多行注释：/*

                   */
javadoc 注释（会被翻译成文档）：  /**
            *给类和方法添加的注释 
            *@开头会加下划线，字体加粗，是一个文档的格式。
            *  
                        */
注释生成html文档

52.成熟的类的对象要自己做事情。
1.放着我来
*看看我们之前的代码，还有哪些复制的到处都是
*想一下到处复制代码的话，一旦有变化，就得到处改。
*解决这个问提的关键是什么？成熟的类会说：放着我来！成熟的类的对象要自己做事情，自己操作自己的成员变量。
2.把操作成员变量的代码放在类里。
*初始化成员变量
*简单访问和设置成员变量的值（Java Bean）
*专有的一些计算逻辑
*用类定义成员变量，并把操作成员变量的代码都放在类里，就是封装：
               1.可以集中管控，自己的成员变量别人不可以乱来，避免出现非法的状态，比如库存为负数。
                2.代码逻辑可以公用，避免代码重复，修改的时候只需改一处。
                 3.封装的好，可以更好的抽象一类事情。

53.方法的签名和重载
  1.不同的场景，不同的购买方法
           *看代码：不同的购买方法
           *有重复，但是又明显不一样，怎么办？
 2.方法重载（overload）
 *方法签名：方法名+依次参数类型。注意，返回值不属于方法签名。方法签名是一个方法在一个类中的唯一标识。
   *同一个类中方法可以重名，但是签名不可以重复。一个类中如果定义了名字相同，签名不同的方法，就叫做方法的重载。
     * 看代码：重写我们的购买方式，理解方法签名。 

54.重载的参数匹配规则
      1.重载的参数匹配规则
           *看例程：有了论斤卖的商品，数量变成double类型。有论整个卖的，有散装称重卖的，事情就开始复杂起来
           *看例程：方法调用的时候，参数就不必完全类型一样，对于数字类型的参数，实参数可以自动类型转换成形参类型即可
            *看例程：重载时如果参数类型不完全匹配怎么办?
       // 使用int调用参数为double的方法
            // 依次使用byte，short，int，long，float，double 类型的参数调用buy方法，哪个方法会被调用呢？
             //无论是否重载参数类型可以不完全匹配的规则是”实参数可以自动类型转换成形参类型“
             //重载的特殊之处是：参数满足自动自动类型转换的方法有好几个，重载的规则是选择最”近“的去调用。

55.构造方法：构造实例的方法
       * 如果init方法能在对象创建的时候就自动被调用多方便
        * 自动调用的唯一的问题：调用哪个方法呢？
         * 看例程：学习构造方法（constructor）的语法
//构造方法的方法名必须与类名一样，而且构造方法没有返回值。这样的方法才是构造方法。
//构造方法可以有参数，规则和语法与普通方法一样，使用时，参数传递给new语句后类名的括号后面
 //如果没有显示的添加一个构造方法，Java会给每一个类都会默认自带一个无参数的构造方法如果我们自己添加类构造方法，Java就不会再添加无参数的构造方法。这时候，就不能直接new一个对象不传递参数了（看例子）
 //所以我们一直都在使用构造方法，这也是为什么创建对象的时候类名后面要有一个括号的原因。
  //构造方法无法被点操作符调用或者在普通方法里调用，只能通过new语句在创建对象的时候，间接调用。
//理解一下为什么构造方法不能有返回值，因为有返回值也没有意义，new语句永远返回的是创建出来的对象的引用。

56.构造方法的重载和互相调用
     1.看例程：构造方法的重载和互相调用的语法
     2.看例程：局部变量赋初始值和构造方法殊途同归
//在构造方法里才能调用重载的构造方法。语法为this（实参列表）
//构造方法不能自己调用自己，这会是一个死循环。
//在调用重载的构造方法时。不可以使用成员变量。因为从语意上讲，这个对象还没有被初始化完成，处于中间状态。
//在构造方法里才能调用重载的构造方法时，必须是方法的第一行。后面可以继续有代码
//因为我们添加了构造方法之后，Java就不会再添加无参数的构造方法。如果需要的话，我们可以自己添加这样的构造

57.静态变量
*尽量不要使用Magic Number
*VIP的折扣作为一个成员变量，him浪费啊
*看例程；学习静态变量（也叫做类变量）
//静态变量使用static修饰符
//静态变量如果不赋值，Java也会给它赋以其类型的初始值
//静态变量一般使用全大写字母加下划线分割。这是一个习惯用法
//所有的代码都可以使用静态变量，只要根据防范控制控制符的规范，这个静态变量对其可见即可，比如public的静态变量，所有的代码都可以使用它。但是如果没有public修饰符，只能当前包的代码能使用它。


58.静态方法
*静态方法（也叫类方法）的特点：只能使用参数和静态变量。换言之，就是没有this自引用的方法
*看例程：学习静态方法的定义和静态方法的调用
//除了没有this，静态方法的定义和成员方法一样，也有方法名，返回值和参数。
//静态方法没有this自引用，它不属于某个实例，调用的时候也无需引用，直接用类名调用，所以他也不能直接访问成员变量
//当然在静态方法里面，也可以自己创建对象，或者通过参数，获得对象的引用，进而调用方法和访问成员变量。
//静态方法只是没有this自引用的方法而已。
//使用import static来引入一个静态方法，就可以直接用静态变量名访问了
//import static也可以使用通配符*来引入一个类里所有静态变量。

59.静态方法的重载
*静态方法的重载和成员方法（实例方法）一样
*看例程：理解方法的重载
*顺带学一个三元操作符
三元操作符的返回类型就是冒号两边的类型，两边的类型要和等号左边的变量类型兼容
 double abc = true ? " " :0;

60.static代码块和static变量初始化
//使用某个静态变量的代码块必须在静态变量后面
//（但是仅仅赋值没有限制，很妖的语法哈，有些语法就应该在学会的第一时间忘掉它）































