31.类（class）
      1.用变量表示商品的多个属性。
          2.商品的属性各不相同不能用 数组，可以用 类。
          // TODO 注释高亮
          pubilc class  Merchandise        {
           表示是公共类
             // TODO *类体中可以定义描述这个类的属性的变量。我们称之为成员变量（meber variable）
                // TODO*每个成员变量的定义以;结束
        String name;
          String id;
            int count;
              double price;
}
             // TODO  上面这整个类，其实就是创建了一个模板。描述了一种我们需要的数据类型


32.初探类和对象(Instance/Object)
       1. 从数据类型的角度来看，类就是自己创建了一种新的数据类型。类也叫做“自定义类型”。一个java程序中不允许类同名。
        2.   看例程，学习类和对象的使用。
             Merchandise m1 = new Merchandise();
         # 对象变量类型   名字   new 实例
          *使用new操作符，可以创建一个类的实例/对象（instance/object）。
                  *使用new创建一个类的实例后，类中定义的每种变量都会被赋以其类型的初始值。
                    * 这个和数组也是一样的
               *使用一个同类型的对象变量，可以指向并操作这个实例。这两点和数组都很类似。
             3.使用点操作符，给m1指向的实例赋值。
                        对象变量  .   属性的名字 = 赋值;
               4.   通过点操作符操作对象的属性
                           认识点操作符
                               * 点操作符是用来访问/操作前面实体的属性的，类似于“的”
                                 *merchandise.name可以读作merchandise的name  


33.认识引用类型（上）
        *java  中的数据类型分为基本数据类型和引用数据类型
          *看例程，理解引用    
                Merchandise m1;
               * m1是一个Merchandise类型的引用，只能指向Merchandise类型的实例
                          * 引用数据类型变量包括两部分信息：类型和实例。也就是说,
                          *每一个引用数据类型的变量（简称引用），都是指向某个类（class/自定义类型）
                             *的一个实例/对象（instance/object）。不同类型的引用在Java的世界里都是引用。
                                  *引用的类型信息在创建时就已经确定，可以通过给引用赋值，让其指向不同的实例。比如 m1 就是Merchandise类型，只能指向Merchandise的实例。
                  *给一个引用赋值，则两者的类型必须一样，m5可以给m1赋值,因为他们类型是一样的。
          2.引用数据类型和基本数据类型
                     2.1引用数据类型和基本数据类型的相同点
                            *都可以用来创建变量，可以赋值和使用其值
                              *本身都是一个地址
                      2.2引用数据类型和基本数据类型的不同点、
                          *基本类型变量的值，就是地址对应的值。引用数据类型的值还是一个地址，需要通过“二级跳”找到实例
                  * 引用数据类型是Java的一种内部类型，是对所有自定义类型和数组引用的统称，并非特指某种类型。


34.认识引用类型（下）
   Merchandise m1 = new Merchandise();
 *使用new操作符可以创建某个类的一个实例，在Java程序运行的时候，所有这些创建出来的实例都被Java放在内存里一个叫做堆（heap）的，类似公告板的地方
 *创建一个实例，就是根据类的定义，点出需要的“纸”，订成一个本子，挂在布告板上。实例本身，可以认为是一个小本子
*引用里存放的，相当于某个本子所在的布告板的地址。


35.类，对象和引用的关系
   1. 类和对象的关系
     *类是对象的模板，对象是类的一个实例
      *一个Java程序中类名相同的类只能有一个，也就是类型不会重名
       *一个类可以有很多对象
          *一个对象只能根据一个类来创建
     2.引用和类以及对象的关系
      *引用必须是，只能是一个类的引用
           *引用只能指向其所属的类型的类的对象
            *相同类型的引用之间可以赋值
              *只能通过指向一个对象的引用，来操作一个对象，比如访问某个成员变量


36.认识数组类型
1.数组是一种特殊的类
 *数组的类名就是类型带上中括号
 *同一类型的数组，每个数组对象的大小可以不一样。也就是每个数组对象占用的内存可以不一样，这点和类的对象不同。
  *可以用引用指向类型相同大小不同的数组，因为它们属于同一种类型
2.引用的数组
    *可以把类名当作自定义类型，定义引用的数组，甚至多维数组。
3.
  * “数组变量”其背后真身就是引用。数组类型就是一种特殊的类
   *数组的大小不决定数组的类型，数组的类型是只是由元素类型决定的


37.引用的缺省值null
*null是引用类型的缺省值
 *null代表空，不存在。可以读作空
*引用类型的数组创建出来，初始值都是空
   1.null带来的问题
     *大名鼎鼎的NullPointerException(NPE)
    *如果不确定，使用前要先判断引用是不是空
    2.通过null理解引用的”二级跳“
      

38.像自定义类型一样使用类
      1.类就是一种自定义类型
            *在类定义中可以使用类，创建类的引用
             *在类定义中，甚至可以使用类自己的类创建引用
               *引用类型的缺省值是null。一个类定义中如果有引用，创建出来的实例，其缺省值是null


39.java中的包和访问修饰符（上）
    *类多太混乱?用package管理
      1.为了避免类在一起混用，可以把类放在文件夹里。这时就需要用package语句告诉Java这个类在哪个package里。package语句要和源文件的目录完全对应，大小写要一致。
      （class 名字对应文件名， class所在的文件路径就叫package ）
        2.package读作包。一般来说，类都会在包里，而不会直接放在根目录
        3.不同的包里可以有相同名字的类
        4.一个类只能有一个package语句，如果有package语句，则必须是类的第一行有效代码
    *类使用太繁琐怎么办？用import
        1.当使用另一个包里的类时候，需要带上包名
              2.每次使用都带包名很繁琐，可以在使用的类的上面使用import语句，一次性解决问题，就可以直接使用类了。就好像我们之前用过的Scanner类
              3.import语句可以有多个
               4.如果需要import一个包中的很多类，可以使用*通配符
                 ////import 引进
                          1.import  + 路径 + 导入需要使用的类
                           2.import  +  路径 +  *   （通配符）//访问路径下所有的类


40.java中的包和访问修饰符（下）
        1.属性 访问修饰符：public
          *被public修饰的属性，可以被任意包中的类访问
           *没有访问修饰符的属性，称作缺省的访问修饰符，可以被本包内的其他类和自己的对象
            * 访问修饰符是一种限制或者允许属性访问的修饰符
          2.类的全限定名
               *包名 + 类名 = 类的全限定名。也可以简称为 类的全名
                 *同一个Java程序中全限定名字不可重复



























